generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum PlanName {
  BASIC
  GOLD
  PRO
}

model User {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  username     String
  email        String
  avatar       String
  rating       Int?
  coins        Int        @default(0)
  currentCoins Int?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Rating       Rating[]
  UserPlans    UserPlan[]

  PaymeTransaction PaymeTransaction[]
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  score     Int
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

model Plan {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      PlanName   @unique
  price     Int
  duration  Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  UserPlans UserPlan[]

  PaymeTransaction PaymeTransaction[]
}

model UserPlan {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  plan      Plan     @relation(fields: [planId], references: [id])
  planId    String   @db.ObjectId
  startDate DateTime @default(now())
  endDate   DateTime // calculated: startDate + plan.duration
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, planId])
  @@index([endDate])
}

model PaymeTransaction {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  userId       String             @db.ObjectId
  planId       String             @db.ObjectId
  paymeTransId String             @unique @map("payme_trans_id")
  amount       Float
  createdAt    DateTime           @default(now()) @map("created_at")
  performAt    DateTime?          @map("perform_at")
  cancelAt     DateTime?          @map("cancel_at")
  state        Int
  reason       Int?
  status       TransactionStatus?
  updatedAt    DateTime           @updatedAt @map("updated_at")

  // Relations
  plan Plan @relation(fields: [planId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("payme_transactions")
}

enum TransactionStatus {
  PENDING
  CREATED
  PAID
  CANCELED
}
