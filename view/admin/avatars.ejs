
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Avatar Admin Panel</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f7fa;
            color: #333;
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        h1 {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 30px;
            font-size: 2.5rem;
        }

        .upload-section {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }

        .upload-form {
            display: flex;
            gap: 15px;
            align-items: end;
            flex-wrap: wrap;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            min-width: 200px;
        }

        label {
            margin-bottom: 5px;
            font-weight: 600;
            color: #555;
        }

        input[type="file"],
        input[type="text"],
        input[type="number"] {
            padding: 10px;
            border: 2px solid #ddd;
            border-radius: 5px;
            font-size: 14px;
            transition: border-color 0.3s;
        }

        input[type="file"]:focus,
        input[type="text"]:focus,
        input[type="number"]:focus {
            outline: none;
            border-color: #3498db;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .btn-primary {
            background-color: #3498db;
            color: white;
        }

        .btn-primary:hover {
            background-color: #2980b9;
        }

        .btn-danger {
            background-color: #e74c3c;
            color: white;
            font-size: 12px;
            padding: 8px 16px;
        }

        .btn-danger:hover {
            background-color: #c0392b;
        }

        .btn-edit {
            background-color: #f39c12;
            color: white;
            font-size: 12px;
            padding: 8px 16px;
        }

        .btn-edit:hover {
            background-color: #e67e22;
        }

        .avatars-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }

        .avatar-card {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            transition: transform 0.3s;
        }

        .avatar-card:hover {
            transform: translateY(-5px);
        }

        .avatar-image {
            width: 100%;
            height: 200px;
            object-fit: cover;
            border-radius: 8px;
            margin-bottom: 15px;
            border: 2px solid #eee;
        }

        .avatar-info {
            margin-bottom: 15px;
        }

        .avatar-name {
            font-size: 18px;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 8px;
        }

        .avatar-price {
            font-size: 16px;
            font-weight: 600;
            color: #f39c12;
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .gold-icon {
            color: #f1c40f;
        }

        .avatar-details {
            font-size: 12px;
            color: #7f8c8d;
            margin: 2px 0;
        }

        .avatar-url {
            background-color: #ecf0f1;
            padding: 8px;
            border-radius: 4px;
            font-family: monospace;
            font-size: 11px;
            word-break: break-all;
            margin: 10px 0;
        }

        .avatar-actions {
            display: flex;
            gap: 10px;
            justify-content: space-between;
        }

        .error-message {
            background-color: #e74c3c;
            color: white;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
            text-align: center;
        }

        .success-message {
            background-color: #27ae60;
            color: white;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
            text-align: center;
            display: none;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 20px;
        }

        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .edit-form {
            display: none;
            margin-top: 10px;
        }

        .edit-form input {
            width: 100%;
            margin-bottom: 10px;
        }

        .edit-actions {
            display: flex;
            gap: 10px;
        }

        .price-input-group {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .price-input-group .gold-icon {
            font-size: 16px;
        }

        @media (max-width: 768px) {
            .upload-form {
                flex-direction: column;
                align-items: stretch;
            }

            .form-group {
                min-width: unset;
            }

            .avatars-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
<div class="container">
    <h1>üñºÔ∏è Avatar Admin Panel</h1>

    <% if (typeof error !== 'undefined' && error) { %>
        <div class="error-message">
            <%= error %>
        </div>
    <% } %>

    <div class="success-message" id="successMessage"></div>
    <div class="loading" id="loading">
        <div class="spinner"></div>
        <p>Processing...</p>
    </div>

    <div class="upload-section">
        <h2>Upload New Avatar</h2>
        <form class="upload-form" id="uploadForm" enctype="multipart/form-data">
            <div class="form-group">
                <label for="avatar">Select Image</label>
                <input type="file" id="avatar" name="avatar" accept="image/*" required>
            </div>
            <div class="form-group">
                <label for="name">Avatar Name</label>
                <input type="text" id="name" name="name" placeholder="Enter avatar name">
            </div>
            <div class="form-group">
                <label for="price">Price (Gold)</label>
                <div class="price-input-group">
                    <span class="gold-icon">ü™ô</span>
                    <input type="number" id="price" name="price" placeholder="0" min="0" value="0">
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Upload Avatar</button>
        </form>
    </div>

    <div class="avatars-grid">
        <% if (avatars && avatars.length > 0) { %>
            <% avatars.forEach(avatar => { %>
                <div class="avatar-card" data-id="<%= avatar.id %>">
                    <img src="<%= avatar.url %>" alt="<%= avatar.name %>" class="avatar-image">
                    <div class="avatar-info">
                        <div class="avatar-name"><%= avatar.name %></div>
                        <div class="avatar-price">
                            <span class="gold-icon">ü™ô</span>
                            <%= avatar.price || 0 %> Gold
                        </div>
                        <div class="avatar-details">Size: <%= (avatar.size / 1024).toFixed(2) %> KB</div>
                        <div class="avatar-details">Type: <%= avatar.mimetype %></div>
                        <div class="avatar-details">Uploaded: <%= new Date(avatar.createdAt).toLocaleDateString() %></div>
                        <div class="avatar-url">URL: <%= avatar.url %></div>
                    </div>

                    <div class="avatar-actions">
                        <button class="btn btn-edit" onclick="toggleEdit('<%= avatar.id %>')">Edit</button>
                        <button class="btn btn-danger" onclick="deleteAvatar('<%= avatar.id %>')">Delete</button>
                    </div>

                    <div class="edit-form" id="edit-<%= avatar.id %>">
                        <input type="text" id="newName-<%= avatar.id %>" value="<%= avatar.name %>" placeholder="New name">
                        <div class="price-input-group">
                            <span class="gold-icon">ü™ô</span>
                            <input type="number" id="newPrice-<%= avatar.id %>" value="<%= avatar.price || 0 %>" placeholder="Price" min="0">
                        </div>
                        <div class="edit-actions">
                            <button class="btn btn-primary" onclick="saveEdit('<%= avatar.id %>')">Save</button>
                            <button class="btn" onclick="cancelEdit('<%= avatar.id %>')">Cancel</button>
                        </div>
                    </div>
                </div>
            <% }) %>
        <% } else { %>
            <div style="grid-column: 1 / -1; text-align: center; padding: 40px; color: #7f8c8d;">
                <h3>No avatars found</h3>
                <p>Upload your first avatar using the form above!</p>
            </div>
        <% } %>
    </div>
</div>

<script>
  // Upload form handler
  document.getElementById('uploadForm').addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = new FormData();
    const fileInput = document.getElementById('avatar');
    const nameInput = document.getElementById('name');
    const priceInput = document.getElementById('price');

    if (!fileInput.files[0]) {
      alert('Please select a file');
      return;
    }

    formData.append('avatar', fileInput.files[0]);
    formData.append('name', nameInput.value || fileInput.files[0].name);
    formData.append('price', priceInput.value || '0');

    showLoading(true);

    try {
      const response = await fetch('/avatars/upload', {
        method: 'POST',
        body: formData
      });

      if (response.ok) {
        showSuccess('Avatar uploaded successfully!');
        setTimeout(() => location.reload(), 1500);
      } else {
        const error = await response.json();
        alert('Upload failed: ' + (error.message || 'Unknown error'));
      }
    } catch (error) {
      alert('Upload failed: ' + error.message);
    } finally {
      showLoading(false);
    }
  });

  // Toggle edit form
  function toggleEdit(id) {
    const editForm = document.getElementById(`edit-${id}`);
    const isVisible = editForm.style.display === 'block';
    editForm.style.display = isVisible ? 'none' : 'block';
  }

  // Cancel edit
  function cancelEdit(id) {
    document.getElementById(`edit-${id}`).style.display = 'none';
  }

  // Save edit
  async function saveEdit(id) {
    const newName = document.getElementById(`newName-${id}`).value.trim();
    const newPrice = parseInt(document.getElementById(`newPrice-${id}`).value) || 0;

    if (!newName) {
      alert('Please enter a name');
      return;
    }

    showLoading(true);

    try {
      const response = await fetch(`/avatars/${id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ name: newName, price: newPrice })
      });

      if (response.ok) {
        showSuccess('Avatar updated successfully!');
        setTimeout(() => location.reload(), 1500);
      } else {
        const error = await response.json();
        alert('Update failed: ' + (error.message || 'Unknown error'));
      }
    } catch (error) {
      alert('Update failed: ' + error.message);
    } finally {
      showLoading(false);
    }
  }

  // Delete avatar
  async function deleteAvatar(id) {
    if (!confirm('Are you sure you want to delete this avatar?')) {
      return;
    }

    showLoading(true);

    try {
      const response = await fetch(`/avatars/${id}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        showSuccess('Avatar deleted successfully!');
        setTimeout(() => location.reload(), 1500);
      } else {
        const error = await response.json();
        alert('Delete failed: ' + (error.message || 'Unknown error'));
      }
    } catch (error) {
      alert('Delete failed: ' + error.message);
    } finally {
      showLoading(false);
    }
  }

  // Utility functions
  function showLoading(show) {
    document.getElementById('loading').style.display = show ? 'block' : 'none';
  }

  function showSuccess(message) {
    const successEl = document.getElementById('successMessage');
    successEl.textContent = message;
    successEl.style.display = 'block';
    setTimeout(() => {
      successEl.style.display = 'none';
    }, 3000);
  }
</script>
</body>
</html>